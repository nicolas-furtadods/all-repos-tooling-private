name: "Code Format Workflow"

on:
  workflow_call:
    inputs:
      push-code:
        description: Commit the files after changes has been made.
        type: boolean
        default: true
      terraform-version:
        description: Terraform version to install
        type: string
        default : "1.5.2"
      python-version:
        description: Python version to install
        type: string
        default: "3.9.17"

jobs:
  format:
    runs-on: [ubuntu-latest]
    environment: all-automation
    steps:
      - name: "Checkout Source Code"
        uses: actions/checkout@v5

      - name: "Checkout All Repos Tooling Private"
        uses: actions/checkout@v5
        with:
          repository: nicolas-furtadods/all-repos-tooling-private
          token: ${{ secrets.GITHUB_TOKEN }}
          path: tooling/

      - name: "Install Terraform"
        uses:  hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
            
      - name: "Install Python"
        uses: actions/setup-python@v6
        with:
          python-version: ${{ inputs.python-version }}

      - name: "Install Python Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r ./tooling/scripts/requirements.txt
            
      - name: "Install Terraform Linter"
        uses: terraform-linters/setup-tflint@v5
        with:
          tflint_version: v0.52.0
          tflint_wrapper: true

      - name: Terraform Format Recursive
        run: | 
          terraform fmt -recursive .

      - name: Terraform Lint Init
        run: |
          tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        id: tflint
        run: |
          tflint -f compact --recursive --minimum-failure-severity=error

      - name: Post TFLint Results
        run: |
          {
            echo "### TFLint Result"
            echo "<details><summary>Lint Results</summary>"
            echo 
            echo \`\`\`
            echo "${{ steps.tflint.outputs.stdout }}"
            echo \`\`\`
            echo "</details>"
            echo
          } >> $GITHUB_STEP_SUMMARY

      - name: Format TFLint Result
        id: format_tflint_result
        run: |
          delimiter="$(openssl rand -hex 12)"
          {
            echo "## TFLint Report"
            echo
            echo "The following issues were detected by TFLint:"
            echo
            echo "<<<$delimiter"
            echo "${{ steps.tflint.outputs.stdout }}" 2>&1 >> $GITHUB_OUTPUT
            echo "$delimiter>>>"
            echo
            echo "*This comment was generated by [All Repos Tooling](https://github.com/nicolas-furtadods/all-repos-tooling-private)"
          } >> $GITHUB_OUTPUT

      - name: post results
        uses: actions/github-script@v7
        env:
          body_content: ${{ steps.format_tflint_result.outputs.content }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body_content
            })
    
      - name: Set git user
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Commit modified files
        run: |
          git add --all -- ':!tooling/'
          git commit -m "Terraform Code Format"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true # Necessary if case the code is good and nothing has changed

      - name: Generate GitHub App Token
        id: generate_token     
        env:
          GH_APPLICATION_ID: ${{ secrets.GH_APPLICATION_ID }}
          GH_APPLICATION_INSTALLATION_ID: ${{ secrets.GH_APPLICATION_INSTALLATION_ID }}
          GH_APP_PRIVATE_KEY: ${{ secrets.GH_APP_PRIVATE_KEY }}
        run: python ./tooling/scripts/generate_token.py
      
      - name: Push code
        if: inputs.push-code
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.github_app_token }}
        run: |
          git push
        
            